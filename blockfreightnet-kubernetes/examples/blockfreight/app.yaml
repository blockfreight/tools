# // File: ./blockfreightnet-kubernetes/examples/blockfreight/app.yaml
# // Summary: Application deployment tools for Blockfreight™ | The blockchain of global freight.
# // License: MIT License
# // Company: Blockfreight, Inc.
# // Author: Julian Smith, Gian Felipe, Sean Turner
# // Site: https://blockfreight.com
# // Support: <support@blockfreight.com>

# // Copyright © 2018 Blockfreight, Inc. All Rights Reserved.

# // Permission is hereby granted, free of charge, to any person obtaining
# // a copy of this software and associated documentation files (the "Software"),
# // to deal in the Software without restriction, including without limitation
# // the rights to use, copy, modify, merge, publish, distribute, sublicense,
# // and/or sell copies of the Software, and to permit persons to whom the
# // Software is furnished to do so, subject to the following conditions:

# // The above copyright notice and this permission notice shall be
# // included in all copies or substantial portions of the Software.

# // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# // WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# // =================================================================================================================================================
# // =================================================================================================================================================
# //
# // BBBBBBBBBBBb     lll                                kkk             ffff                         iii                  hhh            ttt
# // BBBB``````BBBB   lll                                kkk            fff                           ```                  hhh            ttt
# // BBBB      BBBB   lll      oooooo        ccccccc     kkk    kkkk  fffffff  rrr  rrr    eeeee      iii     gggggg ggg   hhh  hhhhh   tttttttt
# // BBBBBBBBBBBB     lll    ooo    oooo    ccc    ccc   kkk   kkk    fffffff  rrrrrrrr eee    eeee   iii   gggg   ggggg   hhhh   hhhh  tttttttt
# // BBBBBBBBBBBBBB   lll   ooo      ooo   ccc           kkkkkkk        fff    rrrr    eeeeeeeeeeeee  iii  gggg      ggg   hhh     hhh    ttt
# // BBBB       BBB   lll   ooo      ooo   ccc           kkkk kkkk      fff    rrr     eeeeeeeeeeeee  iii   ggg      ggg   hhh     hhh    ttt
# // BBBB      BBBB   lll   oooo    oooo   cccc    ccc   kkk   kkkk     fff    rrr      eee      eee  iii    ggg    gggg   hhh     hhh    tttt    ....
# // BBBBBBBBBBBBB    lll     oooooooo       ccccccc     kkk     kkkk   fff    rrr       eeeeeeeee    iii     gggggg ggg   hhh     hhh     ttttt  ....
# //                                                                                                        ggg      ggg
# //   Blockfreight™ | The blockchain of global freight.                                                      ggggggggg
# //
# // =================================================================================================================================================
# // =================================================================================================================================================

# // Initializes BFTX app to interact with the Blockfreight™ Network.


# // Initializes BFTX Service to interact with endpoints
---
apiVersion: v1
kind: Service

# // BFTX Metadata Annontation
metadata:
  annotations:
    # // BFTX tolerate-unready-endpoints - Defaults to affimative response in bootstrap phase
    # // Note: Future deprecation: https://github.com/kubernetes/kubernetes/issues/49239
    # // @todo SECURITY CHECK / STACK OVERFLOW / PRE-READY INJECTION ATTACK VECTORS ? (any) ?
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  # // Project Name & App Label
  name: blockfreight
  labels:
    app: blockfreight
spec:
  # // Define Endpoint (Load-balancer) & Port Assignment
  type: LoadBalancer
  ports:
  - port: 888
    targetPort: 46656
    name: p2p
  - port: 24365
    targetPort: 46657
    name: rpc
  - port: 80
    name: http
  selector:
    app: bftx

# // Initializes BFTX Service to interact with endpoints
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    # // BFTX tolerate-unready-endpoints - Defaults to affimative response in bootstrap phase
    # // Note: Future deprecation: https://github.com/kubernetes/kubernetes/issues/49239
    # // @todo SECURITY CHECK / STACK OVERFLOW / PRE-READY INJECTION ATTACK VECTORS ? (any) ?
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  name: blockfreight-api
  labels:
    app: blockfreight-api
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  ports:
  - port: 8080
    targetPort: 12345  
  selector:
    app: bftx

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bftx-config
data:
  seeds: "bftx-0"
  validators: "bftx-0"
  validator.power: "10"
  genesis.json: |-
    {
      "genesis_time": "2016-04-26T22:00:00Z",
      "chain_id": "chain-IdealX",
      "validators": [],
      "app_hash": ""
    }
  pub_key_nginx.conf: |-
    server {
      listen 80 default_server;
      listen [::]:80 default_server ipv6only=on;
      location /pub_key.json { root /usr/share/nginx/; }
      location /app_pub_key.json { root /usr/share/nginx/; }
    }

---
apiVersion: v1
kind: ConfigMap
data:
  genesis.json: |-
    {
        "chain_id":"chain-idealX",
        "app_options":{
            "accounts":[
              {
                  "pub_key":"bftx-0",
                  "coins":[
                    {
                        "denom":"mycoin",
                        "amount":1000000000
                    }
                  ]
              }
            ]
        }
      }
metadata:
    name: app-config    

---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: bftx-budget
spec:
  selector:
    matchLabels:
      app: bftx
  minAvailable: 2

---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: bftx
spec:
  selector:
    matchLabels:
       app: bftx
  serviceName: blockfreight
  replicas: 1
  template:
    metadata:
      labels:
        app: bftx
    spec:
     initContainers:
      - name: tm-gen-validator
        image: tendermint/tendermint:0.10.0
        command: ["bash", "-c", "
            set -ex\n
            if [ ! -f /tendermint/priv_validator.json ]; then\n
              tendermint gen_validator > /tendermint/priv_validator.json\n                    
            fi\n
            cat /tendermint/priv_validator.json | jq \".pub_key\" > /tendermint/pub_key.json\n 
          "]
        volumeMounts: 
        - name: tmdir
          mountPath: /tendermint
      - name: app-gen-key
        image: blockfreight/go-bftx:bootstrap       
        command: ["bash", "-c", "
            set -ex\n
            if [ ! -f /app/key.json ]; then\n
              basecoin key new > /app/key.json\n
              # pub_key.json will be served by app-pub-key container\n
            fi\n
            cat /app/key.json | jq \".pub_key\" > /app/pub_key.json\n
          "]
        volumeMounts: 
          - name: appdir
            mountPath: /app
     containers:
      - name: tm
        imagePullPolicy: IfNotPresent
        image: tendermint/tendermint:0.15.0
        ports:
        - containerPort: 46656
          name: p2p
        - containerPort: 46657
          name: rpc
        env:
        - name: SEEDS
          valueFrom:
            configMapKeyRef:
              name: bftx-config
              key: seeds
        - name: VALIDATOR_POWER
          valueFrom:
            configMapKeyRef:
              name: bftx-config
              key: validator.power
        - name: VALIDATORS
          valueFrom:
            configMapKeyRef:
              name: bftx-config
              key: validators
        - name: TMHOME
          value: /tendermint
        command:
        - bash
        - "-c"
        - |
          set -ex
          # copy template
          cp /etc/tendermint/genesis.json /tendermint/genesis.json
          # fill genesis file with validators
          IFS=',' read -ra VALS_ARR <<< "$VALIDATORS"
          fqdn_suffix=$(hostname -f | sed 's#[^.]*\.\(\)#\1#')
          for v in "${VALS_ARR[@]}"; do
            # wait until validator generates priv/pub key pair
            set +e
            curl -s --fail "http://$v.$fqdn_suffix/pub_key.json" > /dev/null
            ERR=$?
            while [ "$ERR" != 0 ]; do
              sleep 5
              curl -s --fail "http://$v.$fqdn_suffix/pub_key.json" > /dev/null
              ERR=$?
            done
            set -e
            # add validator to genesis file along with its pub_key
            curl -s "http://$v.$fqdn_suffix/pub_key.json" | jq ". as \$k | {pub_key: \$k, power: $VALIDATOR_POWER, name: \"$v\"}" > pub_validator.json
            cat /tendermint/genesis.json | jq ".validators |= .+ [$(cat pub_validator.json)]" > tmpgenesis && mv tmpgenesis /tendermint/genesis.json
            rm pub_validator.json
          done
          # construct seeds
          IFS=',' read -ra SEEDS_ARR <<< "$SEEDS"
          seeds=()
          for s in "${SEEDS_ARR[@]}"; do
            seeds+=("$s.$fqdn_suffix:46656")
          done
          seeds=$(IFS=','; echo "${seeds[*]}")
          cat > /tendermint/config.toml << EOL                                                                                                                                                                             
          # This is a TOML config file.
          # For more information, see https://github.com/toml-lang/toml
          proxy_app = "tcp://127.0.0.1:46658"
          moniker = "anonymous"
          fast_sync = true
          db_backend = "leveldb"
          log_level = "state:info,*:error"
          [rpc]
          laddr = "tcp://0.0.0.0:46657"
          [p2p]
          laddr = "tcp://0.0.0.0:46656"
          seeds = ""
          [tx_index]
          indexer="kv"
          index_tags="bftx.id"
          EOL
          tendermint node --p2p.seeds="$seeds" --moniker="`hostname`" --proxy_app="tcp://127.0.0.1:46658" --consensus.create_empty_blocks=false
        volumeMounts:
        - name: tmdir
          mountPath: /tendermint
        - mountPath: /etc/tendermint/genesis.json
          name: tmconfigdir
          subPath: genesis.json
        - name: socksdir
          mountPath: /socks

      - name: app
        imagePullPolicy: Always
        image: blockfreight/go-bftx:develop
        ports:
        - containerPort: 12345
        env:
        - name: BFTXHOME
          value: /go/src/github.com/blockfreight/go-bftx
        - name: LOCAL_RPC_CLIENT_ADDRESS
          value: tcp://blockfreight:46657
        workingDir: /go/src/github.com/blockfreight/go-bftx
        command:
        - bash
        - "-c"
        - |
          set -ex
          # replace "tm-N" with public keys in genesis file
          cp /etc/app/genesis.json genesis.json
          fqdn_suffix=$(hostname -f | sed 's#[^.]*\.\(\)#\1#')
          # for every "base/account"
          i=0
          length=$(cat genesis.json | jq ".app_options.accounts | length")
          while [[ $i -lt $length ]]; do
            # extract pod name ("tm-0")
            pod=$(cat genesis.json | jq -r ".app_options.accounts[$i].pub_key")
            # wait until pod starts to serve its pub_key
            set +e
            curl -s --fail "http://$pod.$fqdn_suffix/app_pub_key.json" > /dev/null
            ERR=$?
            while [ "$ERR" != 0 ]; do
              sleep 5
              curl -s --fail "http://$pod.$fqdn_suffix/app_pub_key.json" > /dev/null
              ERR=$?
            done
            set -e
            # get its pub_key
            curl -s "http://$pod.$fqdn_suffix/app_pub_key.json" | jq "." > k.json
            # replace pod name with it ("tm-0" => "{"type": ..., "data": ...}")
            cat genesis.json | jq ".app_options.accounts[$i].pub_key = $(cat k.json | jq '.')" > tmpgenesis && mv tmpgenesis genesis.json
            rm -f k.json
            i=$((i+1))
          done
          rm -f /socks/app.sock # remove old socket
          bftnode start 
        volumeMounts:
        - name: appdir
          mountPath: /app
        - mountPath: /etc/app/genesis.json
          name: appconfigdir
          subPath: genesis.json
        - name: socksdir
          mountPath: /socks

      - name: pub-key
        imagePullPolicy: IfNotPresent
        image: nginx
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8080
        command:
        - bash
        - "-c"
        - |
          set -ex
          # fixes 403 Permission Denied (open() "/tendermint/pub_key.json" failed (13: Permission denied))
          # => we cannot serve from /tendermint, so we copy the file
          mkdir -p /usr/share/nginx
          cp -r /tendermint/pub_key.json /usr/share/nginx/pub_key.json
          ls /app/
          cp /app/pub_key.json /usr/share/nginx/app_pub_key.json

          mkdir -p /etc/nginx/html
          cd /etc/nginx/html
          touch index.html
          cat > index.html << EOL   
            <!DOCTYPE html PUBLIC"ISO/IEC 15445:2000//DTD HTML//EN"><html><head><title></title></head><body><p>Blockfreight.</body></html>
          EOL

          nginx -g "daemon off;"
        volumeMounts:
        - name: tmdir
          mountPath: /tendermint
        - name: appdir
          mountPath: /app
        - mountPath: /etc/nginx/conf.d/pub_key.conf
          name: tmconfigdir
          subPath: pub_key_nginx.conf

     volumes:
      - name: tmconfigdir
        configMap:
          name: bftx-config
      - name: appconfigdir
        configMap:
          name: app-config
      - name: socksdir
        emptyDir: {}

  volumeClaimTemplates:
  - metadata:
      name: tmdir
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
  - metadata:
      name: appdir
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 12Mi

# // =================================================
# // Blockfreight™ | The blockchain of global freight.
# // =================================================

# // BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
# // BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
# // BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
# // BBBBBBB                    BBBBBBBBBBBBBBBBBBB
# // BBBBBBB                       BBBBBBBBBBBBBBBB
# // BBBBBBB                        BBBBBBBBBBBBBBB
# // BBBBBBB       BBBBBBBBB        BBBBBBBBBBBBBBB
# // BBBBBBB       BBBBBBBBB        BBBBBBBBBBBBBBB
# // BBBBBBB       BBBBBBB         BBBBBBBBBBBBBBBB
# // BBBBBBB                     BBBBBBBBBBBBBBBBBB
# // BBBBBBB                        BBBBBBBBBBBBBBB
# // BBBBBBB       BBBBBBBBBB        BBBBBBBBBBBBBB
# // BBBBBBB       BBBBBBBBBBB       BBBBBBBBBBBBBB
# // BBBBBBB       BBBBBBBBBB        BBBBBBBBBBBBBB
# // BBBBBBB       BBBBBBBBB        BBB       BBBBB
# // BBBBBBB                       BBBB       BBBBB
# // BBBBBBB                    BBBBBBB       BBBBB
# // BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
# // BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
# // BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

# // ==================================================
# // Blockfreight™ | The blockchain for global freight.
# // ==================================================
